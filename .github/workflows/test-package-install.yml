name: Test Package Installation

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  test-install:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        node-version: [24]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci || npm install

      - name: Build package
        run: npm run build

      - name: Pack package (capture filename)
        id: pack
        run: |
          set -euo pipefail
          TARBALL_JSON=$(npm pack --json)
          echo "$TARBALL_JSON"
          TARBALL=$(echo "$TARBALL_JSON" | node -e "process.stdin.on('data',d=>{const j=JSON.parse(d.toString());console.log(j[0].filename)})")
          echo "TARBALL=$TARBALL" >> "$GITHUB_OUTPUT"
          ls -la "$TARBALL"

      - name: Create fresh test project
        run: |
          mkdir -p /tmp/test-install/logs
          cd /tmp/test-install
          npm init -y

      - name: Install from tarball
        run: |
          cd /tmp/test-install
          npm install "$GITHUB_WORKSPACE/${{ steps.pack.outputs.TARBALL }}"
          npm ls --depth=0 || true
          ls -la node_modules/.bin || true

      - name: Verify package.json exists in installation
        run: |
          if [ ! -f /tmp/test-install/node_modules/@agent_vega/laminar/package.json ]; then
            echo "ERROR: package.json missing from installed package!"
            exit 1
          fi
          echo "✓ package.json found in installation"

      - name: Verify dist files exist
        run: |
          if [ ! -f /tmp/test-install/node_modules/@agent_vega/laminar/dist/scripts/lam.js ]; then
            echo "ERROR: dist/scripts/lam.js missing!"
            exit 1
          fi
          if [ ! -f /tmp/test-install/node_modules/@agent_vega/laminar/dist/scripts/mcp-server.js ]; then
            echo "ERROR: dist/scripts/mcp-server.js missing!"
            exit 1
          fi
          echo "✓ All required dist files found"

      - name: Test lam command
        run: |
          cd /tmp/test-install
          npx lam --help > logs/lam-help.stdout 2> logs/lam-help.stderr
          STATUS=$?
          if [ $STATUS -ne 0 ]; then
            echo "ERROR: lam command failed!"
            exit $STATUS
          fi
          echo "✓ lam command works"

      - name: Test laminar-mcp command (timeout tolerant)
        shell: bash
        run: |
          cd /tmp/test-install
          python3 - << 'PYCODE'
          import subprocess, sys
          out_path = "/tmp/test-install/logs/laminar-mcp-help.stdout"
          err_path = "/tmp/test-install/logs/laminar-mcp-help.stderr"
          try:
              with open(out_path, "wb") as out, open(err_path, "wb") as err:
                  p = subprocess.Popen(["npx", "laminar-mcp", "--help"], stdout=out, stderr=err)
                  try:
                      p.wait(timeout=5)
                  except subprocess.TimeoutExpired:
                      p.kill()
                      sys.exit(124)
                  sys.exit(p.returncode)
          except Exception as e:
              sys.stderr.write(str(e) + "\n")
              sys.exit(1)
          PYCODE
          exit_code=$?
          if [ $exit_code -ne 0 ] && [ $exit_code -ne 124 ]; then
            echo "ERROR: laminar-mcp command failed with exit code $exit_code"
            exit 1
          fi
          echo "✓ laminar-mcp command executable"

      - name: Test lam init (minimal template)
        run: |
          cd /tmp/test-install
          npx lam init --template minimal
          if [ ! -f laminar.config.json ]; then
            echo "ERROR: lam init failed to create config!"
            exit 1
          fi
          echo "✓ lam init works"

      - name: Verify bin symlinks
        run: |
          cd /tmp/test-install
          PY_REALPATH='import os,sys;print(os.path.realpath(sys.argv[1]))'
          LAM_BIN=$(python3 -c "$PY_REALPATH" node_modules/.bin/lam)
          MCP_BIN=$(python3 -c "$PY_REALPATH" node_modules/.bin/laminar-mcp)

          echo "lam symlink points to: $LAM_BIN"
          echo "laminar-mcp symlink points to: $MCP_BIN"

          if [ ! -f "$LAM_BIN" ]; then
            echo "ERROR: lam symlink points to non-existent file!"
            exit 1
          fi

          if [ ! -f "$MCP_BIN" ]; then
            echo "ERROR: laminar-mcp symlink points to non-existent file!"
            exit 1
          fi

          echo "✓ All bin symlinks valid"

      - name: Debug - List package contents (on failure)
        if: failure()
        run: |
          echo "=== Installed package contents ==="
          ls -laR /tmp/test-install/node_modules/@agent_vega/laminar/ || true

          echo "=== Package.json location ==="
          find /tmp/test-install/node_modules/@agent_vega/laminar -name "package.json" || true

          echo "=== JavaScript files ==="
          find /tmp/test-install/node_modules/@agent_vega/laminar -name "*.js" | head -20 || true

      - name: Collect symlink resolution notes (on failure)
        if: failure()
        run: |
          cd /tmp/test-install
          mkdir -p logs
          PY_REALPATH='import os,sys;print(os.path.realpath(sys.argv[1]))'
          python3 -c "$PY_REALPATH" node_modules/.bin/lam > logs/lam.realpath.txt 2>&1 || true
          python3 -c "$PY_REALPATH" node_modules/.bin/laminar-mcp > logs/laminar-mcp.realpath.txt 2>&1 || true

      - name: Upload failure artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: package-install-debug-${{ matrix.os }}-node${{ matrix.node-version }}
          path: |
            /tmp/test-install/node_modules/@agent_vega/laminar/**
            /tmp/test-install/node_modules/.bin/**
            /tmp/test-install/logs/**
            ${{ steps.pack.outputs.TARBALL }}
          if-no-files-found: warn
