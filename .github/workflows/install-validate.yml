name: Install Validate (GitHub install)
on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  github-install-e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build Laminar
        run: |
          npm ci
          npm run build

      - name: Create temp consumer project
        run: |
          mkdir -p /tmp/laminar-consumer && cd /tmp/laminar-consumer
          npm init -y
          npm install -D vitest@1
          echo "export default { test: { } }" > vitest.config.mjs
          mkdir -p tests
          cat > tests/smoke.spec.ts << 'EOF'
          import { describe, it, expect } from 'vitest';
          describe('smoke', () => {
            it('works', () => { expect(1+1).toBe(2); });
          });
          EOF

      - name: Install Laminar from GitHub
        working-directory: /tmp/laminar-consumer
        run: |
          npm install -D github:anteew/Laminar

      - name: Resolve reporter path
        id: reporter
        working-directory: /tmp/laminar-consumer
        run: |
          node -e "const fs=require('fs'); const path=require('path'); let p=null; function ok(c){return fs.existsSync(c)}; try{p=require.resolve('@agent_vega/laminar/dist/src/test/reporter/jsonlReporter.js')}catch{}; if(!p){try{p=require.resolve('laminar/dist/src/test/reporter/jsonlReporter.js')}catch{}}; if(!p){const candidates=[ './node_modules/@agent_vega/laminar/dist/src/test/reporter/jsonlReporter.js', './node_modules/laminar/dist/src/test/reporter/jsonlReporter.js', './node_modules/Laminar/dist/src/test/reporter/jsonlReporter.js' ].map(x=>path.resolve(process.cwd(), x)); for(const c of candidates){ if(ok(c)){ p=c; break; } } } if(!p){ console.error('Unable to resolve reporter path'); process.exit(2); } console.log('REPORTER='+p)" >> $GITHUB_ENV
          echo "Reporter is: $REPORTER"

      - name: Run Laminar
        working-directory: /tmp/laminar-consumer
        env:
          LAMINAR_REPORTER_PATH: ${{ env.REPORTER }}
        run: |
          npx lam init
          npx lam run --lane auto
          npx lam summary

      - name: Validate artifacts
        working-directory: /tmp/laminar-consumer
        run: |
          test -f reports/summary.jsonl
          ls -R reports || true
